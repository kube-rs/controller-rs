name: ci

on:
  pull_request:
  push:
    branches:
      - main

env:
  IMAGE: clux/controller

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Build and push with docker buildx
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare image tags
        id: prep
        run: |
          TAG=$(grep -E "^version" Cargo.toml | awk -F"\"" '{print $2}' | head -n 1)
          IMAGE="${{ env.IMAGE }}"
          echo "semver=${TAG}" >> $GITHUB_OUTPUT
          if curl -sSL https://registry.hub.docker.com/v1/repositories/${IMAGE}/tags | jq -r ".[].name" | grep -q ${TAG}; then
            echo "Semver tag ${TAG} already exists - not publishing"
            echo "tagsbase=${IMAGE}:latest" >> $GITHUB_OUTPUT
            echo "tagsotel=${IMAGE}:otel" >> $GITHUB_OUTPUT
          else
            echo "Semver tag ${TAG} not found - publishing"
            echo "tagsbase=${IMAGE}:latest,${IMAGE}:${TAG}" >> $GITHUB_OUTPUT
            echo "tagsotel=${IMAGE}:otel,${IMAGE}:otel-${TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Docker login on main origin
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker buildx and push with base features
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: "FEATURES="
          cache-from: type=gha,scope=version6
          cache-to: type=gha,scope=version6,mode=max
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.prep.outputs.tagsbase }}
          platforms: linux/amd64

      - name: Persist base image build to a tarball
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          tags: ${{ steps.prep.outputs.tagsotel }}
          cache-from: type=gha,scope=version6
          cache-to: type=gha,scope=version6,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload base docker image as artifact for e2e tests
        uses: actions/upload-artifact@v3
        with:
          name: controller-image
          path: /tmp/image.tar

      - name: Docker buildx and push with telemetry
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: "FEATURES=telemetry"
          cache-from: type=gha,scope=version6
          cache-to: type=gha,scope=version6,mode=max
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.prep.outputs.tagsotel }}
          platforms: linux/amd64

  e2e:
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - uses: actions/checkout@v2
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.25
          k3d-name: kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"
      - run: kubectl apply -f yaml/crd.yaml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Download docker image artifact from docker job
        uses: actions/download-artifact@v3
        with:
          name: controller-image
          path: /tmp
      - name: Load docker image from tarball
        run: docker load --input /tmp/image.tar
      - run: helm template charts/doc-controller | kubectl apply -f -
      - run: kubectl wait --for=condition=available deploy/doc-controller --timeout=20s
      - run: kubectl apply -f yaml/instance-samuel.yaml
      - run: sleep 2 # TODO: add condition on status and wait for it instead
      # verify reconcile actions have happened
      - run: kubectl get event --field-selector "involvedObject.kind=Document,involvedObject.name=samuel" | grep "HideRequested"
      - run: kubectl get doc -oyaml | grep -A1 finalizers | grep documents.kube.rs

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt,clippy
      - run: cargo +nightly fmt -- --check

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: --all-features

  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.25
          k3d-name: kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"

      - name: Build workspace
        run: cargo build
      - name: Install crd
        run: cargo run --bin crdgen | kubectl apply -f -
      - name: Run all default features integration library tests
        run: cargo test --lib --all -- --ignored
 
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      # Real CI work starts here
      - name: Build workspace
        run: cargo build
      - name: Run workspace unit tests
        run: cargo test
      - name: Generate crd.yaml
        run: cargo run --bin crdgen > yaml/crd.yaml
      - name: Generate deployment.yaml
        run: helm template charts/doc-controller > yaml/deployment.yaml
      - name: Ensure generated output is committed
        run: |
          if ! git diff --exit-code yaml/; then
              echo "Uncommitted changes in yaml directory"
              echo "Please run 'just generate' and commit the results"
              exit 1
          fi
